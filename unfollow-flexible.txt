const unfollowUsers = async () => {
    // Configuration
    const SCROLL_PAUSE = 2000;
    const UNFOLLOW_PAUSE = 1000;
    const SCROLL_AMOUNT = 2000;
    const MAX_EMPTY_SCROLLS = 10;
    
    // Stats tracking
    let stats = {
        unfollowed: 0,
        failed: 0,
        start: Date.now(),
        totalProcessed: 0
    };

    // Helper functions
    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
    
    const formatTime = (ms) => {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
    };

    const logStats = () => {
        const runtime = Date.now() - stats.start;
        console.log(`
👥 Unfollow Progress:
━━━━━━━━━━━━━━━━━━━━━━━━
✅ Unfollowed: ${stats.unfollowed}
❌ Failed: ${stats.failed}
📊 Total Processed: ${stats.totalProcessed}
⏱️ Runtime: ${formatTime(runtime)}
━━━━━━━━━━━━━━━━━━━━━━━━
        `);
    };

    // Debug function to see what buttons are on the page
    const debugPage = () => {
        console.log('🔍 Debugging page for buttons...');
        
        const allButtons = document.querySelectorAll('div[role="button"], span[role="button"], button');
        console.log(`📊 Total buttons found: ${allButtons.length}`);
        
        const followingButtons = [];
        const unfollowButtons = [];
        
        allButtons.forEach((button, index) => {
            const text = button.textContent?.trim() || '';
            const ariaLabel = button.getAttribute('aria-label') || '';
            const dataTestid = button.getAttribute('data-testid') || '';
            
            if (text === 'Following' || ariaLabel.includes('Following') || dataTestid.includes('follow')) {
                followingButtons.push({
                    index,
                    text,
                    ariaLabel,
                    dataTestid,
                    element: button
                });
            }
            
            if (text === 'Unfollow' || ariaLabel.includes('Unfollow') || dataTestid.includes('unfollow')) {
                unfollowButtons.push({
                    index,
                    text,
                    ariaLabel,
                    dataTestid,
                    element: button
                });
            }
        });
        
        console.log('📋 Following buttons found:', followingButtons);
        console.log('📋 Unfollow buttons found:', unfollowButtons);
        
        return { followingButtons, unfollowButtons };
    };

    // Find following buttons with multiple strategies
    const findFollowingButtons = () => {
        console.log('🔍 Searching for following buttons...');
        
        // First debug what's on the page
        const debug = debugPage();
        
        // Strategy 1: Look for buttons with "Following" text
        const textButtons = Array.from(document.querySelectorAll('div[role="button"], span[role="button"], button')).filter(button => {
            const text = button.textContent?.trim() || '';
            return text === 'Following';
        });
        
        if (textButtons.length > 0) {
            console.log(`✅ Found ${textButtons.length} buttons with "Following" text`);
            return textButtons;
        }
        
        // Strategy 2: Look for aria-label containing "Following"
        const ariaButtons = Array.from(document.querySelectorAll('div[role="button"], span[role="button"], button')).filter(button => {
            const ariaLabel = button.getAttribute('aria-label') || '';
            return ariaLabel.includes('Following');
        });
        
        if (ariaButtons.length > 0) {
            console.log(`✅ Found ${ariaButtons.length} buttons with aria-label containing "Following"`);
            return ariaButtons;
        }
        
        // Strategy 3: Look for data-testid containing "follow"
        const testidButtons = Array.from(document.querySelectorAll('div[role="button"], span[role="button"], button')).filter(button => {
            const dataTestid = button.getAttribute('data-testid') || '';
            return dataTestid.includes('follow');
        });
        
        if (testidButtons.length > 0) {
            console.log(`✅ Found ${testidButtons.length} buttons with data-testid containing "follow"`);
            return testidButtons;
        }
        
        console.log('❌ No following buttons found with any strategy');
        return [];
    };

    // Scroll for more content
    const scrollForMore = async () => {
        const prevCount = findFollowingButtons().length;
        console.log(`📜 Scrolling for more users... (Current: ${prevCount})`);
        
        // Scroll multiple times to ensure we get more content
        for (let i = 0; i < 3; i++) {
            window.scrollBy(0, SCROLL_AMOUNT);
            await sleep(1000);
        }
        
        await sleep(SCROLL_PAUSE);
        
        const newCount = findFollowingButtons().length;
        console.log(`📊 After scroll: ${newCount} buttons found`);
        
        return {
            hasMore: newCount > prevCount,
            newCount
        };
    };

    // Process a single user
    const processUser = async (button, index) => {
        try {
            console.log(`🔄 Processing user ${index + 1}...`);
            console.log(`📋 Button text: "${button.textContent}"`);
            console.log(`📋 Button aria-label: "${button.getAttribute('aria-label')}"`);
            
            // Scroll button into view
            button.scrollIntoView({ behavior: 'smooth', block: 'center' });
            await sleep(500);
            
            // Click the following button
            console.log('🖱️ Clicking Following button...');
            button.click();
            await sleep(1000);
            
            // Look for unfollow button with multiple strategies
            console.log('🔍 Looking for unfollow option...');
            let unfollowButton = null;
            
            // Strategy 1: Look for "Unfollow" text
            const allElements = document.querySelectorAll('div[role="button"], span[role="button"], button, span, div');
            for (const element of allElements) {
                const text = element.textContent?.trim() || '';
                if (text === 'Unfollow' || text.includes('Unfollow')) {
                    unfollowButton = element;
                    break;
                }
            }
            
            // Strategy 2: Look for data-testid="unfollow"
            if (!unfollowButton) {
                unfollowButton = document.querySelector('[data-testid="unfollow"]');
            }
            
            // Strategy 3: Look for aria-label containing "Unfollow"
            if (!unfollowButton) {
                unfollowButton = document.querySelector('[aria-label*="Unfollow"]');
            }
            
            if (unfollowButton) {
                console.log('✅ Found unfollow button, clicking...');
                unfollowButton.click();
                await sleep(500);
                
                // Look for confirmation button
                const confirmButton = document.querySelector('[data-testid="confirmationSheetConfirm"]');
                if (confirmButton) {
                    console.log('✅ Found confirmation button, clicking...');
                    confirmButton.click();
                    stats.unfollowed++;
                    console.log(`✅ Successfully unfollowed user ${index + 1}`);
                    await sleep(UNFOLLOW_PAUSE);
                } else {
                    console.log(`⚠️ No confirmation button found`);
                    document.body.click(); // Close menu
                }
            } else {
                console.log(`⚠️ No unfollow option found`);
                document.body.click(); // Close menu
            }
            
            stats.totalProcessed++;
            
        } catch (error) {
            console.error(`❌ Error processing user ${index + 1}:`, error);
            stats.failed++;
            document.body.click(); // Close any open menus
        }
    };

    // Main loop
    const mainLoop = async () => {
        let consecutiveEmptyScrolls = 0;
        let totalProcessed = 0;
        
        try {
            while (true) {
                if (window.stopUnfollow) {
                    console.log('🛑 Stop signal received!');
                    break;
                }
                
                const buttons = findFollowingButtons();
                
                if (buttons.length === 0) {
                    console.log('📜 No following buttons found, scrolling...');
                    const scrollResult = await scrollForMore();
                    
                    if (!scrollResult.hasMore) {
                        consecutiveEmptyScrolls++;
                        console.log(`⚠️ No new content (attempt ${consecutiveEmptyScrolls}/${MAX_EMPTY_SCROLLS})`);
                        
                        if (consecutiveEmptyScrolls >= MAX_EMPTY_SCROLLS) {
                            console.log('🏁 Reached maximum empty scrolls, finishing...');
                            break;
                        }
                    } else {
                        consecutiveEmptyScrolls = 0;
                        console.log(`🎉 Found ${scrollResult.newCount} new users!`);
                    }
                    continue;
                }
                
                consecutiveEmptyScrolls = 0;
                console.log(`🎯 Processing ${buttons.length} users...`);
                
                for (let i = 0; i < buttons.length; i++) {
                    if (window.stopUnfollow) break;
                    
                    await processUser(buttons[i], totalProcessed);
                    totalProcessed++;
                    await sleep(500);
                }
                
                logStats();
                await sleep(1000);
            }
        } catch (error) {
            console.error('💥 Fatal error:', error);
        }
        
        logStats();
        console.log('🎉 Script finished!');
    };

    // Start the process
    console.log('🚀 Starting flexible unfollow script...');
    await mainLoop();
};

// Add stop function
window.stopUnfollow = false;

// Run the script
unfollowUsers().catch(console.error);

console.log(`
Flexible Unfollow Script Running!
━━━━━━━━━━━━━━━━━━━━━━━━
To stop: type "window.stopUnfollow = true"
━━━━━━━━━━━━━━━━━━━━━━━━
`); 