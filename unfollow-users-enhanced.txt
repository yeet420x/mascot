const unfollowUsers = async () => {
    // Configuration
    const SCROLL_PAUSE = 2000;  // Time to wait after scrolling
    const UNFOLLOW_PAUSE = 1000;  // Time between unfollows
    const SCROLL_AMOUNT = 2000; // Pixels to scroll each time
    const MAX_EMPTY_SCROLLS = 10; // Maximum empty scrolls before stopping
    
    // Stats tracking
    let stats = {
        unfollowed: 0,
        failed: 0,
        start: Date.now(),
        totalProcessed: 0
    };

    // Helper to format time
    const formatTime = (ms) => {
        const seconds = Math.floor(ms / 1000);
        const minutes = Math.floor(seconds / 60);
        const hours = Math.floor(minutes / 60);
        return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
    };

    // Print stats
    const logStats = () => {
        const runtime = Date.now() - stats.start;
        console.log(`
üë• User Unfollow Progress:
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
‚úÖ Unfollowed: ${stats.unfollowed}
‚ùå Failed: ${stats.failed}
üìä Total Processed: ${stats.totalProcessed}
‚è±Ô∏è Runtime: ${formatTime(runtime)}
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
        `);
    };

    // Sleep helper
    const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

    // Debug function to log all buttons on page
    const debugButtons = () => {
        console.log('üîç Debugging all buttons on page...');
        
        // Check for various button types
        const allButtons = document.querySelectorAll('div[role="button"], span[role="button"], button');
        console.log(`üìä Total buttons found: ${allButtons.length}`);
        
        const followingButtons = [];
        const unfollowButtons = [];
        
        allButtons.forEach((button, index) => {
            const text = button.textContent?.toLowerCase() || '';
            const ariaLabel = button.getAttribute('aria-label')?.toLowerCase() || '';
            const dataTestid = button.getAttribute('data-testid') || '';
            
            if (text.includes('following') || ariaLabel.includes('following') || dataTestid.includes('follow')) {
                followingButtons.push({
                    index,
                    text: button.textContent,
                    ariaLabel: button.getAttribute('aria-label'),
                    dataTestid: button.getAttribute('data-testid'),
                    element: button
                });
            }
            
            if (text.includes('unfollow') || ariaLabel.includes('unfollow') || dataTestid.includes('unfollow')) {
                unfollowButtons.push({
                    index,
                    text: button.textContent,
                    ariaLabel: button.getAttribute('aria-label'),
                    dataTestid: button.getAttribute('data-testid'),
                    element: button
                });
            }
        });
        
        console.log('üìã Following buttons found:', followingButtons);
        console.log('üìã Unfollow buttons found:', unfollowButtons);
        
        return { followingButtons, unfollowButtons };
    };

    // Enhanced scroll function
    const scrollForMoreUsers = async () => {
        const prevHeight = document.documentElement.scrollHeight;
        const prevUserCount = document.querySelectorAll('[data-testid="follow"], [data-testid="unfollow"], div[aria-label*="Following"], div[aria-label*="following"]').length;
        
        console.log(`üìú Scrolling for more users... (Current: ${prevUserCount} following/unfollow buttons)`);
        
        // Scroll multiple times
        for (let i = 0; i < 2; i++) {
            window.scrollBy(0, SCROLL_AMOUNT);
            await sleep(1000);
        }
        
        await sleep(SCROLL_PAUSE);
        
        const newHeight = document.documentElement.scrollHeight;
        const newUserCount = document.querySelectorAll('[data-testid="follow"], [data-testid="unfollow"], div[aria-label*="Following"], div[aria-label*="following"]').length;
        
        console.log(`üìä Scroll result: Height ${prevHeight} ‚Üí ${newHeight}, Users ${prevUserCount} ‚Üí ${newUserCount}`);
        
        return {
            hasMore: newHeight > prevHeight || newUserCount > prevUserCount,
            newUserCount
        };
    };

    // Find all available following buttons with enhanced detection
    const findAllFollowingButtons = () => {
        console.log('üîç Searching for following buttons...');
        
        // First, debug what's on the page
        const debug = debugButtons();
        
        const selectors = [
            // Primary selectors
            '[data-testid="follow"]',
            'div[role="button"][data-testid="follow"]',
            'span[data-testid="follow"]',
            
            // Aria label selectors
            'div[aria-label*="Following"]',
            'div[aria-label*="following"]',
            'span[aria-label*="Following"]',
            'span[aria-label*="following"]',
            
            // Text content selectors
            'div[role="button"]:has-text("Following")',
            'span[role="button"]:has-text("Following")',
            
            // Fallback selectors
            'div[data-testid="unfollow"]',
            'div[role="button"][data-testid="unfollow"]',
            'span[data-testid="unfollow"]',
            'div[aria-label*="Unfollow"]',
            'div[aria-label*="unfollow"]'
        ];
        
        for (const selector of selectors) {
            try {
                const buttons = document.querySelectorAll(selector);
                if (buttons.length > 0) {
                    console.log(`‚úÖ Found ${buttons.length} buttons using: ${selector}`);
                    return Array.from(buttons);
                }
            } catch (error) {
                console.log(`‚ùå Selector failed: ${selector}`);
            }
        }
        
        // If no buttons found with selectors, try manual search
        console.log('üîç Trying manual button search...');
        const allButtons = document.querySelectorAll('div[role="button"], span[role="button"], button');
        const followingButtons = [];
        
        allButtons.forEach(button => {
            const text = button.textContent?.toLowerCase() || '';
            const ariaLabel = button.getAttribute('aria-label')?.toLowerCase() || '';
            const dataTestid = button.getAttribute('data-testid') || '';
            
            if (text.includes('following') || ariaLabel.includes('following') || dataTestid.includes('follow')) {
                followingButtons.push(button);
            }
        });
        
        if (followingButtons.length > 0) {
            console.log(`‚úÖ Found ${followingButtons.length} following buttons manually`);
            return followingButtons;
        }
        
        console.log('‚ùå No following buttons found');
        return [];
    };

    // Process a single user with enhanced logic
    const processUser = async (followingButton, userIndex) => {
        try {
            console.log(`üîÑ Processing user ${userIndex + 1}...`);
            console.log(`üìã Button text: "${followingButton.textContent}"`);
            console.log(`üìã Button aria-label: "${followingButton.getAttribute('aria-label')}"`);
            console.log(`üìã Button data-testid: "${followingButton.getAttribute('data-testid')}"`);
            
            // Scroll user into view
            followingButton.scrollIntoView({ behavior: 'smooth', block: 'center' });
            await sleep(500);
            
            // Click following button to reveal unfollow option
            console.log('üñ±Ô∏è Clicking following button...');
            followingButton.click();
            await sleep(1500);

            // Look for unfollow button in the dropdown with multiple strategies
            console.log('üîç Looking for unfollow option...');
            let unfollowButton = null;
            
            // Strategy 1: Direct unfollow button
            unfollowButton = document.querySelector('[data-testid="unfollow"]');
            
            // Strategy 2: Text-based search
            if (!unfollowButton) {
                const allButtons = document.querySelectorAll('div[role="button"], span[role="button"], button');
                for (const button of allButtons) {
                    const text = button.textContent?.toLowerCase() || '';
                    if (text.includes('unfollow')) {
                        unfollowButton = button;
                        break;
                    }
                }
            }
            
            // Strategy 3: Aria-label search
            if (!unfollowButton) {
                unfollowButton = document.querySelector('div[aria-label*="Unfollow"], div[aria-label*="unfollow"]');
            }
            
            if (unfollowButton) {
                console.log('‚úÖ Found unfollow button, clicking...');
                unfollowButton.click();
                await sleep(500);

                // Find confirmation button
                const confirmButton = document.querySelector('[data-testid="confirmationSheetConfirm"]');
                if (confirmButton) {
                    console.log('‚úÖ Found confirmation button, clicking...');
                    confirmButton.click();
                    stats.unfollowed++;
                    console.log(`‚úÖ Successfully unfollowed user ${userIndex + 1}`);
                    await sleep(UNFOLLOW_PAUSE);
                } else {
                    console.log(`‚ö†Ô∏è No confirmation button found for user ${userIndex + 1}`);
                    document.body.click(); // Close menu
                }
            } else {
                console.log(`‚ö†Ô∏è No unfollow option found for user ${userIndex + 1}`);
                document.body.click(); // Close menu
            }
            
            stats.totalProcessed++;
            
        } catch (error) {
            console.error(`‚ùå Error processing user ${userIndex + 1}:`, error);
            stats.failed++;
            document.body.click(); // Try to close any open menus
        }
    };

    // Main continuous unfollow loop
    const unfollowLoop = async () => {
        let consecutiveEmptyScrolls = 0;
        let totalUsersProcessed = 0;
        
        try {
            while (true) {
                // Check for stop signal
                if (window.stopUnfollow) {
                    console.log('üõë Stop signal received!');
                    break;
                }
                
                // Find all available following buttons
                const followingButtons = findAllFollowingButtons();
                
                if (followingButtons.length === 0) {
                    console.log('üìú No following buttons found, scrolling for more users...');
                    const scrollResult = await scrollForMoreUsers();
                    
                    if (!scrollResult.hasMore) {
                        consecutiveEmptyScrolls++;
                        console.log(`‚ö†Ô∏è No new content loaded (attempt ${consecutiveEmptyScrolls}/${MAX_EMPTY_SCROLLS})`);
                        
                        if (consecutiveEmptyScrolls >= MAX_EMPTY_SCROLLS) {
                            console.log('üèÅ Reached maximum empty scrolls, finishing...');
                            break;
                        }
                    } else {
                        consecutiveEmptyScrolls = 0; // Reset counter
                        console.log(`üéâ Found ${scrollResult.newUserCount} new users!`);
                    }
                    continue;
                }

                // Reset empty scroll counter since we found users
                consecutiveEmptyScrolls = 0;
                
                console.log(`üéØ Processing ${followingButtons.length} available users...`);
                
                // Process ALL available users, not just a batch
                for (let i = 0; i < followingButtons.length; i++) {
                    if (window.stopUnfollow) break;
                    
                    await processUser(followingButtons[i], totalUsersProcessed);
                    totalUsersProcessed++;
                    
                    // Small pause between users
                    await sleep(500);
                }
                
                logStats();
                
                // Brief pause before looking for more users
                await sleep(1000);
            }
        } catch (error) {
            console.error('üí• Fatal error:', error);
        }

        // Final stats
        logStats();
        console.log('üéâ Script finished!');
    };

    // Start the unfollow process
    console.log('üöÄ Starting enhanced user unfollow...');
    await unfollowLoop();
};

// Add stop function to global scope
window.stopUnfollow = false;

// Run the script
unfollowUsers().catch(console.error);

console.log(`
Enhanced User Unfollow Script Running!
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
To stop: type "window.stopUnfollow = true"
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
`); 